{2:top üìö BsDoc ‚Äî Documentation Generation for BuckleScript}

Status: [alpha].

This documentation was bootstrapped with [bsdoc], how cool is that? üöÄ

{%html:
<a href="https://github.com/ostera/bsdoc" class="github-corner" aria-label="View source on GitHub"><svg width="80" height="80" viewBox="0 0 250 250" style="fill:#70B7FD; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>
%}

{%html:
<nav class="toc">
%}
{ol
  {li {{:#quick-start} Quick Start}}
  {li {{:#generating-docs} Generating Docs}}
  {li {{:#a-byte-of-insight} A Byte of Insight...}}
  {li {{:#tips-&-tricks} Tips & Tricks}
    {ol
      {li {{:#keep-your-docs-in-your-interfaces!} Keep Your Docs in your
      Interfaces}}
      {li {{:#no-bs-publishing-to-github} No-BS Publishing to Github}}
    }}
}
{%html:
</nav>
%}

{3 Quick Start}

Before you crank up your documenting knob and write some of your best docs, we
need to do some setup.

We will need 3 things. Only 3, but I promise we're working on making this be
zero things. Okay, let's do this!

+ Install [opam] ‚Äî you can check their amazing documentation {{:http://opam.ocaml.org/doc/Install.html}here}.
+ Create an [opam switch] with version [4.02.3+buckle-master] ‚Äî [opam switch
create 4.02.3+buckle-master]
+ Install [odoc] ‚Äî [opam install odoc]

That should be the setup you need to generate documentation. If you want to
learn more about {b why} do we need all this, please read on!

Now finally we can run [yarn add bsdoc] to install.

{3 Generating Docs}

To generate your documentation it's enough to just run:

+ [yarn run bsdoc support-files] ‚Äî one time, to get everything setup!
+ [yarn run bsdoc build <PkgName>] ‚Äî any time you want to rebuild your package
docs.

You can use the very sensible defaults used to generate [bsdoc] docs, or you can
customize plenty of parameters. Try adding `--help` in any command to see more
details on all the parameters available, their behavior, and their default
values.

{3 A Byte of Insight...}

[bsdoc] is really just an {e orchestrating} tool, and like any orchestrator it
orchestrates {e something else}. In this case, that something else is [odoc].
[odoc] ({{:https://ocaml.github.io/odoc} Homepage}) is a documentation compiler,
and it's not meant to be used directly by a human. Instead, [odoc] is designed
to be used by a higher level tool that makes your life easier. One such tools is
this one, [bsdoc].

As a documentation compiler, [odoc] can do great things with the language
features, such as automatically letting you know that your links are broken
because some type-definitions have changed. It's really quite useful.

{3 Tips & Tricks}

{4 Keep your Docs in your Interfaces!}

It's easy to fall trap of inline-documentation, and doing so in the middle of
the complexity of your code can make it even harder to read and understand.
Don't forget that in Reason and OCaml the type system can easily tell you
exactly what the type of anything is, so learn the editor shortcut for that
instead and I promise you'll find reading your code much more enjoyable.

As a rule of thumb, begin a module with a `.rei` or `.mli` and begin by
documenting what things are, not how they are internally. This normally means
that you'll want to just say you have a type, but not really describe what's
inside of it or how it's going to be used.

{[
/** 
  The Infinity Stone type is the most powerful type in the Universe. Very few
  can wield it's powers!
  */
type infinity_stone;
]}

This is also a best practice of OCaml module design! So it's a huge win-win for
you as a documentation writer, and you as a great module designer.

{4 No-BS Publishing to Github}

Github nowadays allows you to publish documentation from the same branch your
code is on. This is useful for 2 reasons:

+ It's easy to see what version of the docs is released, it's the docs on the
master branch.
+ It's easy to update the docs, just regenerate them on the master branch.

But there's one small problem when using this feature. If you started using
[odoc] or [bsdoc] you'll be quick to realize that the generated documentation
lives {e one folder below your docs folder}. That is, if your package name is
[ReactReason], and your docs folder is [./docs], then your main [index.html]
file will be here:

{[
ReasonReact
‚îî‚îÄ‚îÄ docs
    ‚îî‚îÄ‚îÄ ReasonReact
        ‚îî‚îÄ‚îÄ index.html
]}

A small fix for this, really just a small hack, is to include an [index.html]
file inside your [./docs] folder with a small [<meta />] redirect:

{[
<meta http-equiv="refresh" content="0;URL='./ReasonReact'" />
]}

That'll let you publish your docs üôåüèº
